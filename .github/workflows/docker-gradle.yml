name: Docker CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
permissions:
  contents: read

jobs:
  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 1. Java 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

          # 2. gradlew에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 3. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 3.5. 환경 변수 파일 생성 (이름: application.properties)
      # 이 파일은 GitHub Actions 워커의 현재 작업 디렉토리(보통 저장소 루트)에 생성됩니다.
      - name: Create application.properties override file
        run: |
         echo "spring.datasource.url=${{ secrets.DB_URL }}" > application.properties
         echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> application.properties
         echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> application.properties
         echo "spring.mail.username=${{ secrets.GOOGLE_MAIL_USERNAME }}" >> application.properties
         echo "spring.mail.password=${{ secrets.GOOGLE_MAIL_PASSWORD }}" >> application.properties
         echo "jwt.secret=${{ secrets.JWT_SECRET_KEY }}" >> application.properties
         echo "swagger-ui.url=${{ secrets.SWAGGER_URL }}" >> application.properties

      # 4. DockerHub 로그인
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Docker 이미지 빌드
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USER }}/calpick-backend .

      # 6. Docker Hub 이미지 푸시
      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKER_USER }}/calpick-backend

  run-docker-image-on-ec2:
    # build-docker-image 과정이 완료되어야 실행됩니다.
    needs: build-docker-image
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      (github.event_name == 'pull_request' && github.base_ref == 'refs/heads/master')
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지를 풀받습니다
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKER_USER }}/calpick-backend

      # 2. 기존의 컨테이너를 중지시킵니다
      - name: Stop container if running
        run: |
          if [ "$(sudo docker ps -q -f name=calpick-backend)" ]; then
            echo "Stopping container calpick-backend..."
            sudo docker stop calpick-backend
          else
            echo "Container calpick-backend is not running. Skipping stop command."
          fi

      # 3. 최신 이미지를 컨테이너화하여 실행시킵니다
      - name: docker run new container
        run: sudo docker run --name calpick-backend -d -p 8080:8080 ${{ secrets.DOCKER_USER }}/calpick-backend

      # 4. 미사용 이미지를 정리합니다
      - name: delete old docker image
        run: sudo docker system prune -f